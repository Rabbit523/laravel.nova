version: 2
jobs:
  dev:
    docker:
      - image: kinchaku/php

    working_directory: ~/backend

    steps:
      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          - v1-dependencies-

      - run: composer install --optimize-autoloader --no-dev --ignore-platform-reqs

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      - deploy:
          name: Deploy
          command: |
            if [[ "$CIRCLE_BRANCH" == "develop" ]]; then
              chown -R www-data ~/backend/storage
              ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p $SSH_PORT_DEV ubuntu@$SSH_HOST_DEV "sudo chown -R ubuntu:www-data /var/www/backend/storage"
              rsync -e "ssh -o StrictHostKeyChecking=no -p ${SSH_PORT_DEV}" -arcO --no-t --exclude .git --exclude .gitignore ~/backend/ ubuntu@$SSH_HOST_DEV:/var/www/backend/ --delete
              ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p $SSH_PORT_DEV ubuntu@$SSH_HOST_DEV "/var/www/backend/deploy.sh"
            else
              echo "Skipping deploy for feature branch"
            fi

  stage:
    docker:
      - image: kinchaku/alpine-ssh-client

    working_directory: ~/backend

    steps:
      - checkout

      - deploy:
          name: Deploy
          command: |
            cd ~/backend/ && tar --exclude='.git' -cvf ../backend.tar .
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P $SSH_PORT_STAGE ~/backend.tar $SSH_USER_STAGE@$SSH_HOST_STAGE:/var/www/

      - deploy:
          name: Switch to new version
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p $SSH_PORT_STAGE $SSH_USER_STAGE@$SSH_HOST_STAGE "mkdir -p /var/www/backend_new && tar -xf /var/www/backend.tar -C /var/www/backend_new && /var/www/backend_new/deploy_prod.sh ${CIRCLE_SHA1}"

  prod:
    docker:
      - image: kinchaku/alpine-ssh-client

    working_directory: ~/backend

    steps:
      - checkout

      - deploy:
          name: Deploy
          command: |
            cd ~/backend/ && tar --exclude='.git' -cvf ../backend.tar .
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P $SSH_PORT_PROD ~/backend.tar $SSH_USER_PROD@$SSH_HOST_PROD:/var/www/

      - deploy:
          name: Switch to new version
          command: ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p $SSH_PORT_PROD $SSH_USER_PROD@$SSH_HOST_PROD "mkdir -p /var/www/backend_new && tar -xf /var/www/backend.tar -C /var/www/backend_new && /var/www/backend_new/deploy_prod.sh ${CIRCLE_SHA1}"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - dev:
          filters:
            branches:
              only:
                - develop
                - /feature\/.*/
      - e2e:
          filters:
            branches:
              only:
                - /e2e\/.*/
      - stage:
          filters:
            branches:
              only:
                - master
      - hold:
          type: approval
          requires:
           - stage
          filters:
            branches:
              only:
                - master
      - prod:
          filters:
            branches:
              only: master
          requires:
            - hold
